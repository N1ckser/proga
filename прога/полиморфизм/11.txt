#include <iostream>
#include <cmath>
using namespace std;
class Shape {
public:
    virtual double getArea() const {
        cout << "Undefined area calculation\n";
        return 0.0;
    }

    virtual double getPerimeter() const {
       cout << "Undefined perimeter calculation\n";
        return 0.0;
    }
};

class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    double getArea() const override {
        return M_PI * radius * radius;
    }

    double getPerimeter() const override {
        return 2 * M_PI * radius;
    }
};

class Rectangle : public Shape {
private:
    double width, height;

public:
    Rectangle(double w, double h) : width(w), height(h) {}

    double getArea() const override {
        return width * height;
    }

    double getPerimeter() const override {
        return 2 * (width + height);
    }
};

class Triangle : public Shape {
private:
    double side1, side2, side3;

public:
    Triangle(double s1, double s2, double s3) : side1(s1), side2(s2), side3(s3) {}

    double getArea() const override {
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    double getPerimeter() const override {
        return side1 + side2 + side3;
    }
};

int main() {
    Circle circle(5);
    Rectangle rectangle(4, 6);
    Triangle triangle(3, 4, 5);

    cout << "Circle area: " << circle.getArea() << ", perimeter: " << circle.getPerimeter() << std::endl;
    cout << "Rectangle area: " << rectangle.getArea() << ", perimeter: " << rectangle.getPerimeter() << std::endl;
    cout << "Triangle area: " << triangle.getArea() << ", perimeter: " << triangle.getPerimeter() << std::endl;

    return 0;
}