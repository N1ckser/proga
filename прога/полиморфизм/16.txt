#include <iostream>

class Shape {
public:
    virtual void draw() const = 0;
    virtual double CalculationArea() const = 0;
};

class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    void draw() const override {
        std::cout << "Drawing a circle\n";
    }

    double CalculationArea() const override {
        return 3.14159 * radius * radius;
    }
};

class Cylinder : public Shape {
private:
    double radius;
    double height;

public:
    Cylinder(double r, double h) : radius(r), height(h) {}

    void draw() const override {
        std::cout << "Drawing a cylinder\n";
    }

    double CalculationArea() const override {
        double baseArea = 3.14159 * radius * radius;
        double lateralArea = 2 * 3.14159 * radius * height;
        return 2 * baseArea + lateralArea;
    }
};

int main() {
    Circle circle(5);
    Cylinder cylinder(3, 4);

    circle.draw();
    std::cout << "Circle area: " << circle.CalculationArea() << std::endl;

    cylinder.draw();
    std::cout << "Cylinder surface area: " << cylinder.CalculationArea() << std::endl;

    return 0;
}